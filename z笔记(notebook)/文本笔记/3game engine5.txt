》》》》终于开始着色器库的设计，来看看着色器库是用来干嘛的。
着色器库的设置是静态的，用于自动加载着色器内容、诊断着色器。
高度抽象的设置可以为我们自动化识别接口，使在程序中的调用更加简洁，同时也隐藏了一些细节（自动化处理，不用手动显示设置）


》》》》以下是一些设计中的理解：

》》在 ShaderLibary 中，使用之前定义的指针 Ref 和 Scope，不需要包含头文件即可使用，为什么。
原理：
命名空间的作用域在整个程序中都有效，只要命名空间被正确声明和定义，其成员在程序的任何地方都可见。

不使用命名空间的话，直接在代码中使用 Nut::Ref 也是可行的，


》》关于Cherno对于从文件名截取着色器名称的手法，在 C++ 版本的逐步发展中，还有其他更便捷的方法。
原版：
	// Get Shader's name though filepath name
	// maybe : 1.assets/textures/shader.glsl		2./shader	3.shader.glsl	4.shader
	size_t lastSlash = filepath.find_last_of('/\\');
	lastSlash = (lastSlash == std::string::npos ? 0 : lastSlash + 1);
	size_t lastDot = filepath.rfind('.');
	lastDot = (lastDot == std::string::npos ? filepath.size() : lastDot);

	size_t count = lastDot - lastSlash;
	m_Name = filepath.substr(0, count);

新版：（C++ 17）
#include <filesystem>

std::filesystem::path path = filepath;
m_Name = path.stem().string(); // Returns the file's name stripped of the extension.

截取自评论：
@This new feature is very useful for use in Asset Managers as well which I'm currently implementing in my project, it supports native file path directory seeking.
@And it is bulletproof. His code isn't. If the path is "../testures/texture", the count will be negative, because the last dot is before the last slash. And this is a valid path.


--------------------------------------How to build 2D engine-------------------------------------------
没什么要记的，后面也都会涉及。这一集就是一个大概思路。
-------------------------------------Camera Controllers------------------------------------------------
》》》》大致思路
将实际控制通过 Camera Controller 来调用，而不是像以前一样通过 Camera 类来直接的修改和更新 Camera 的值。
现在的 Camera 可以认为是一个深层次的、存放了一些计算方法的库，controller 会调用这些方法，而用户只需要使用 Controller 来进行操纵。


》》》》std::max( )?
std::max 是 C++ 标准库中的一个函数模板，用于比较两个值，并返回其中较大的值。它定义在 <algorithm> 头文件中。


》》》》claudiaIDE 2019
一个可以更改 VS2019 背景的插件，这就是我昨天没有更选代码的原因。因为我去折腾壁纸了。
-----------------------------------Resizing--------------------------------------------------------------
》》》》minimized 这个变量的意义？
举个例子：
比如你在打一个游戏（英雄联盟），现在你打开了购买装备的界面，然后你又做了切换应用的操作。
此时游戏会被最小化到后台，购买界面也会随游戏被最小化。也不可以在脱离游戏界面时被操作。
只有你重新进入游戏界面，继续运行游戏时，这个购买界面才可以被响应（进行购买、关闭等操作）



》》》》关于函数设计时的思考。
application 中的 OnWindowResize 是为了让视口填充整个窗口。
OrthoGraphicCameraController 中的 OnWindowResized 是为了让视口中的物体在窗口大小调整时候比例自适应，而且呈现正确的效果。

但是函数
bool OrthoGraphicCameraController::OnWindowResized(WindowResizeEvent e)
{
	m_AspectRatio = (float)e.GetWidth() / (float)e.GetHeight();			//设置回调的宽高比
	m_Camera.SetProjectionMatrix(-m_AspectRatio * m_ZoomLevel, m_AspectRatio * m_ZoomLevel, -m_ZoomLevel, m_ZoomLevel);
	return false;
} 是这样设计的，
所以 m_AspectRatio 会随 width（分子） 的大小调整正确变化，但是与 Height（分母）的大小变化刚好相反。
而且由于 m_AspectRatio 是 width 除以 height ，所以当使用鼠标在窗口对角进行操作时（即对 Width 和 Height 同时进行改变），渲染的物体比例不变。

这是一个待处理的瑕疵。

----------------------------------------- maintenance ----------------------------------------------------------
》》》》pushd 和 popd 的使用
pushd：将当前目录入栈，并切换到指定的目录。
popd：从栈中弹出最近保存的目录，并切换到该目录。

eg.
::使用 pushd 命令切换目录并将当前目录推入栈中：
pushd <目标目录>
::使用 popd 命令从栈中弹出最近保存的目录并切换到该目录：
popd



----------------------------------- preparing for 2D rendering ----------------------------------------
》》》》没什么要记的，但是我顺手同步跟新一下错误修复的 submit ，并做笔记。


》》》》gitignore 规范
.gitignore文件的规范是通过简单的文本格式来定义忽略规则。每个规则占用一行，用于指定要忽略的文件、文件夹或者特定模式。

文件匹配：
	使用斜杠（/）表示路径分隔符。
	使用星号（*）表示匹配任意数量的字符（除了路径分隔符）。
	使用双星号（**）表示匹配任意数量的字符（包括路径分隔符）。
	使用问号（?）表示匹配一个任意字符。
	使用感叹号（!）表示不忽略的文件或文件夹。
注释：
	使用井号（#）开头的行表示注释，这些行可能会被Git忽略，一般另起一行来写。
	注释可以写在规则的上方，用于对规则进行解释或提供其他相关信息。
eg.
# 忽略所有的编译输出文件
*.o
*.exe
*.dll

# 忽略bin文件夹及其下的内容
/bin/

# 忽略.vscode文件夹
.vscode/

# 不忽略lib文件夹下的example.txt文件
!lib/example.txt

》》*bin\和**bin\之间的区别：
*bin\：表示匹配当前目录下的任意一级子目录中的bin文件夹。例如，src/bin/、lib/bin/等。
**bin\：表示匹配当前目录及其所有子目录中的bin文件夹。例如，src/bin/、src/utils/bin/、lib/bin/等。

》》\bin\和bin\在.gitignore文件中的区别：
**\bin\：这个规则表示匹配当前目录及其所有子目录中的bin文件夹。例如，src/bin/、src/utils/bin/、lib/bin/等都会被匹配到。
**bin\：这个规则表示匹配当前目录及其直接子目录中的名为bin的文件夹。例如，src/bin/、lib/bin/会被匹配到，但是src/utils/bin/不会被匹配到。

》》vs\和.vs\的区别：
从 '\' 看出这都表示忽略文件夹（只不过名称不一样，'.'开头的一般是隐藏文件夹）



》》》》什么是 constexpr ？
constexpr是C++11引入的一个关键字，用于声明可以在编译时求值的常量表达式。它可以用于变量、函数、构造函数等的声明中。

》》constexpr中所有参数必须是字面类型。那
	template<typename T>
	using Scope = std::unique_ptr<T>;
	template<typename T, typename ... Args>
	constexpr Scope<T> CreateScope(Args&& ... args)
	{
		return std::make_unique<T>(std::forward<Args>(args)...);
	}
	这个函数声明为什么是正确的呢？


因为：C++17对constexpr函数进行了一些扩展，放宽了函数参数的限制。
如果函数的参数满足以下条件之一，那么即使函数本身不是字面量函数，也可以声明为constexpr函数：
	1.参数类型是字面类型；
	2.参数是指向字面类型的指针或引用；
	3.参数是数组类型，并且其元素类型是字面类型。
具体分析：
在CreateScope中，虽然模板参数Args可以包含任意类型的参数，但在调用std::make_unique<T>时，参数是通过完美转发传递的
因此参数类型和值在编译期是可以确定的，可以满足constexpr函数的要求。



》》》》constexpr （常量表达式）的好处。
constexpr的好处：提高程序的性能、安全性和可维护性，尤其适用于需要在编译期确定结果的函数。




》》》》template<typename T, typename ... Args> 模版中的 typename ... Args是什么？
》》》》CreateScope(Args&& ... args)中的参数是什么？

typename ... Args 是一个模板参数包，意味着 Args 是一个包含零个或多个模板参数的集合。（ 可以是任意数量的其他类型。）
Args&& ... args 中的 Args&& 是一种右值引用折叠语法。表示将模板参数包 Args 中的每个参数都作为右值引用传递给函数。
其中： Args 是一个模板参数包。
	  && 表示右值引用，表示参数 args 是右值引用类型。
	  ... 则表示参数包展开，即将参数包中的每个参数都单独地传递给函数。
	  args 是函数的参数名。在函数中，它代表了接受模板参数包 Args 中传递进来的参数。



》》》》在函数的返回值中，我发现了 std::forward 这是什么东西？怎样使用？
概念：std::forward 是一个 C++ 标准库中的函数模板，用于实现完美转发（Perfect Forwarding）。
作用：std::forward 允许在函数模板中保持 被传入的参数的类别（左值或右值）和常量性。
	 通过将参数以原始的值类别（左值或右值类型）传递，来避免不必要的拷贝和转换，提高程序的性能和效率。
	 // 后面会涉及到一些概念，先将笔记看下去 ~
参数与返回值：它接受一个参数，并返回相同类型的参数，并且根据参数的值类别（左值或右值）不同，它会将参数转发为左值引用或右值引用。
		    （以此确保参数值属性的正确传递）

使用：
在例子 std::forward<Args>(args)... 中
<Args>指定了传递给 std::forward 函数的参数类型，(args)...指定了传入的每个参数。
结果：
整个表达式的作用是将模板参数包 args 中的每个参数都通过 std::forward 转发给其他函数，并保持其原始的值类别。
这样就实现了完美转发的效果，使得参数在传递过程中保持了原始的左值或右值特性。

》》什么是完美转发？什么是左值引用？什么是右值引用？

--- 0. 值的类别（左值、右值）

左值（Lvalue）
概念：有名称 / 在内存中有确定位置的表达式或对象。
意义：可以被引用、修改和取地址。
eg.	  int x = 5; 中的x就是一个左值。

右值（Rvalue）
概念：不具有名称 / 在内存中没有确定位置的临时表达式或对象。
意义：不能被引用，只能被移动或复制。
eg.	  int y = 3 + 2; 中的3 + 2就是一个右值。

--- 1.引用的两种类型（左值引用、右值引用）。这两种引用基本是对左右值用法的拓展，其本旨与左右值相像。

左值引用：
概念：使用 & 符号声明的引用类型。
意义：表示对一个命名对象的引用，该对象可以被修改。
eg.	  int x = 10; int& y = x;

右值引用：
概念：使用 && 符号声明的引用类型。
意义：表示对一个临时对象或将要销毁的对象的引用，该对象不能被修改。
eg.	  int&& z = 20;

--- 2.
完美转发：完美转发是一种技术，通常涉及使用 std::forward 函数模板来将参数转发为左值引用或右值引用。
在将各种类型的参数传入 std::forward 的过程中，保留原始的值的左右值特性，避免不必要的拷贝和转换，提高程序的性能和效率。



》》》》如果在 return 中不使用 std::forward 呢，有什么结果？

return std::make_unique<T>(std::forward<Args>(args)...);
return std::make_unique<T>(args...);
虽然后者没有错误，但是会丧失参数原本的语义。这会带来性能上的损失，尤其是在处理大型对象时。

》》为什么说会导致性能的损失呢？
一般来说，在传入具有左右值属性的参数时，编译器会根据左右引用的不同属性选择动态转移或复制(拷贝)来传递。也就是移动语义和复制语义。
（通常，右值引用可以触发移动语义，左值引用可以触发复制语义）

如果不使用 std::forward 来保证左右值属性的正确传递，将会导致参数传递时丧失了对应的语义。这意味着即使传递的是右值，也会进行复制构造，而不是移动构造。
然而复制构造需要分配额外的时间和内存来进行深度复制操作，这会消耗相对较大的内存储备，降低性能表现。




》》》》什么是移动语义和复制语义？为什么右值触发移动语义，左值触发复制语义？

在C++中，值的语义（复制或移动）和值的类别（左值和右值）是密切相关的。


复制语义：
概念：在将一个对象传递给另一个对象时，会创建该对象的一个全新的、独立的拷贝，两者之间没有关联。
实现方式：通过拷贝构造函数来实现。

移动语义：
概念：它允许在不复制内存的情况下将对象从一个位置（例如临时对象）转移到另一个位置。它适用于临时对象或者不再需要的对象。
不同之处：移动语义将资源的所有权从一个对象转移到另一个对象，而不是创建资源的拷贝。
实现方式：通过移动构造函数和移动赋值运算符来实现。

开销：
复制语义（大）分配额外的内存和时间来进行深度复制，这会消耗大量的内存，尤其是对于包含大量数据成员的对象（包含大量数据）。
移动语义（小）显著提高程序的性能和效率（特别是动态分配资源时）。
-----------------------------
右值引用触发移动语义：
原因：右值引用通常绑定到临时对象或将要销毁的对象上，这些对象不再需要原来的值，因此可以使用移动语义安全地将其资源移动到新的对象中。
意义：这可以在处理大型对象或需要频繁传递所有权的情况下提高程序性能。

左值引用触发复制语义：
原因：左值引用通常绑定到具名对象上，这些对象仍然需要保持原来的值。因此，对左值引用进行操作时会触发复制语义，即将原来对象的值复制到新的对象中。
意义：这样对象的值也不会被意外地修改。



》》》》现在我开始使用 OneNote 作为我记笔记的主力工具。我将暂停在记事本中的更新。
我可能会使用 .pdf 来上传笔记，或者复制 .one 的文件，不知道可不可行。

现在所有的笔记都有一个对应的 .pdf 格式来使用了。