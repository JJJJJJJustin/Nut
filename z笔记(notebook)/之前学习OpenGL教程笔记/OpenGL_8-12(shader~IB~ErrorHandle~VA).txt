>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>处理着色器（文件流）<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
parse：解析

可以将两个着色器存放在同一个文件中/分开存放，文例第一种。

1.创建一个存放两个着色器的文件夹
	OpenGL项目路径下创建一个文件夹res（resource）资源文件夹
	在res路径下创建文件夹shaders
	在shaders路径下创建新项目Basic.shader（更改拓展名，使其成为文本格式）

2.在文本中存放正常格式的代码，去除 声明、\n、"。(ctrl + h,alt + a)

3.为着色器添加标识（ #shader vertex 或 #shader fragment ）

4.在application中读取文件
	函数外写结构体
	编写一个处理着色器文本的函数：ParseShader()
	函数内写枚举类
	
5.使用ParseShader，更改CreateShader的参数


---------------------------------------sstream--------------------------------------------------------------------------------------------------------------------------------
							
				sstream 头文件提供了 stringstream 类，用于进行字符串流操作。
它可以将字符串作为输入源或输出目标，并提供了方便的方法来读取和写入字符串数据。可以使用 << 运算符将数据写入 stringstream，使用 >> 运算符从 stringstream 读取数据。


简述： 在 C++ 中，字符串流（stringstream）是一个基于内存的流，可以将字符串作为输入源或输出目标。它提供了方便的方法来读取和写入字符串数据。

前提： 要使用 stringstream，需要包含 <sstream> 头文件。

示例： 

    将字符串写入 stringstream 对象：							从字符串中读取数据到 stringstream 对象：
											
											
											#include <iostream>
#include <iostream>									#include <sstream>
#include <sstream>									#include <string>
									
											int main() {
int main() {										    std::string data = "42 3.14 Hello";
    std::stringstream ss;								    std::stringstream ss(data);
    ss << "Hello, " << "World!";							    int num;
    											    double pi;
											    std::string word;
    std::string result = ss.str();							    ss >> num >> pi >> word;
    std::cout << result << std::endl;							    std::cout << "num: " << num << std::endl;
											    std::cout << "pi: " << pi << std::endl;
    											    std::cout << "word: " << word << std::endl;

    return 0;	 									    return 0;									
}											}
												
上述代码创建了一个 stringstream 对象 ss，然后通过 << 运算符将多个字符串写入该对象中。		上述代码首先创建了一个包含多个数据的字符串 data。
最后，使用 str() 成员函数获取 stringstream 中的字符串，并输出到标准输出流中。			然后，使用 stringstream 对象 ss 将该字符串作为输入源。
											通过 >> 运算符从 ss 中依次读取整数、浮点数和字符串，并将其存储到相应的变量中。

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	


										
												
--------------------------fstream---------------------------------------------------		----------------------------------ifSteam------------------------------------
fstream：C++标准库中用于文件输入、输出操作的类。用于打开、读写和关闭文件。				ifstream：C++标准库中仅用于文件输入操作的类。用于从文件中读取数据
fstream 类继承自iostream 类,可以使用iostream 提供的输入和输出操作来处理文件。

		常见操作步骤：											常见操作步骤：

1.包含头文件：											1.包含头文件：
	#include <fstream>。										也是#include <fstream>。

2.创建 fstream 对象并打开文件：可以通过构造函数将文件名作为参数传递给 fstream 对象来打开文件。		2.创建 ifstream 对象并打开文件：类似
	例如：只读方式打开 
	std::fstream file("filename.txt", std::ios::in);

3.检查文件是否成功打开：可以使用 is_open() 函数检查文件是否成功打开。				    	3.检查文件是否成功打开：相同
	例如：
	if (file.is_open()) { // 文件已成功打开 } else { // 文件打开失败 }。

4.读取或写入文件内容：可以使用 << 和 >> 运算符来从文件中读取或写入数据。				4.读取文件内容：可以使用 >> 运算符或 getline() 函数从文件中读取数据。																	例如：
													file >> data; 将从文件中读取数据到变量 data 中；
													std::getline(file, line); 将从文件中读取一行数据到字符串变量 line 中。
5.关闭文件：当不再需要访问文件时，应使用 close() 函数关闭文件。
	例如：											5.关闭文件：相同									file.close();。
------------------------------------------------------------------------------			-------------------------------------------------------------------------------

					

												-------------------------------ifstream和fstream区别----------------------------
												

    												fstream 是通用的文件输入输出类。它既可以用于读取文件内容，也可以用于写入文件内容。

    												ifstream 是专门用于文件输入操作的类。它只能用于从文件中读取数据，而不能用于写入文件。
												--------------------------------------------------------------------------------


 												------------------------普通枚举和枚举类的区别--------------------------------------       
										    		作用域： 
													枚举没有作用域限制，而枚举类的作用域限定在类内部。
												枚举项的访问方式：
													对于普通枚举，枚举项在定义所在的作用域中可直接使用，不需要通过枚举类型限定。
													type = FRAGMENT;
													而对于枚举类，枚举项需要通过枚举类的作用域进行限定访问。
													type = SHADERTYPE::FRAGMENT;      
    												默认底层类型： 
													普通枚举的底层类型是int，可以通过显式指定来修改
													而枚举类的底层类型由编译器自动推导，可以是int、char等整数类型	


		头文件			#include<fstream>
					#include<sstream>
					#include<string>

		创建结构体		struct ShaderProgramSrc{					//用于返回多个值
						std::string VertexSrc;
						std::string FragementSrc;
					};						

		函数声明			static ShaderProgramSrc ParseShader(const std::string& filepath)	//类型： 静态，结构体类型
					{									  参数： 文件路径
		初始化stream			std::ifstream stream(filepath);				//调用ifstream类构造函数
		
		枚举类				enum class ShaderType{					//用于 1简化代码 。
							NONE = -1,VERTEX = 0,FRAGMENT = 1};		      2持续寻找着色器标识。
												      	      3找不到标识，写入ss[-1]
												       	       找到标识，确定着色器类型 。确定写入ss[0]或ss[1]
												       	       持续向ss[]中写入着色器源码
						
		
		初始化line			std::string line;					//getLine
		sstream对象			sstream ss[2];						//数组
		初始化ShaderType对象		ShaderType type = ShaderType::NONE;		
						
					
		循环检索				while(getLine(stream,line)){				//从 input 读取数据到 line（string类中的函数，要包含<string>
							if(line.find("#shader") != std::string::npos)
							{						//读取一行数据，检索shader(如果检索到
								if(line.find("vertex") != std::string::npos)
									type = Shader::VERTEX;		//set to vertex（如果检索到	
								else if(line.find("fragment") != std::string::npos)
									type = ShaderType::FRAGMENT	//set to fragment（如果检索到
							}
							else{
								if (type == SHADERTYPE::NONE)continue;
            							else ss[(int)type] << line << '\n';	//调整位置读入代码
							}
						}
						return { ss[0].str() , ss[1].str() };
					}	
		
-----------------------line.find()------------------------------------------------		-------------------------------getLine（）------------------------------------------
函数： line.find()										函数： getline()
释义： std::string 类的成员函数之一，用于在字符串line中查找指定的子串。				释义： 用于从输入流（如文件、标准输入等）中读取一行数据
声明： size_t find(const string& str, size_t pos = 0) const;					声明： std::getline(istream& input, string& line, char delimiter);
参数： 												参数： 
    str：表示要查找的子串。										input：表示输入流对象，可以是 ifstream、cin 等。
    pos：表示可选的起始搜索位置，默认为 0，表示从字符串的开头开始搜索。					line：表示存储读取到的一行数据的字符串变量。
返回值： 会返回找到的第一个匹配子串的位置索引。如果没有找到，则返回 std::string::npos。					读取的内容将被存储到这个字符串中。
------------------------------------------------------------------------------------			delimiter：表示可选的字符分隔符，用于确定一行的结束位置。
												默认情况下，换行符 \n 被视为行结束符。你也可以指定其他字符作为分隔符，例如逗号 , 或制表符 \t。
												--------------------------------------------------------------------------------------
												
												---------------------- .str()--------------------------------------------------------
												.str()是std::stringstream类的成员函数，用于 获取 或 设置 std::stringstream对象的内部字符串。
												------------------------------------------------------------------------------------------

					
		使用ParseShader函数	ShaderProgramSrc source = parseShader(res/shaders/Basic.shader);	//类型： ShaderProgramSrc
		更改CreateShader参数	unsigned int shader = CreateShader(source.VertexShader , source.FraagmentShader );	//参数： 结构体类型		
												
    													
								    				
												
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>索引缓冲区<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
索引缓冲区对象：
	（Index Buffer Object，IBO）或者Element Buffer Object（EBO）

创建缓冲区的步骤：
	data，BufferGen，BufferBind，BufferData（IBO，VBO均如此）


假设你在绘制一个正方形：

1.
传统情况下需要绘制两个直角三角形拼凑（一个三角形3顶点，绘制正方形共需要6顶点）
	

	修改顶点位置		float positions[]{
					-0.5f,-0.5f,			<-- 一个三角
					 0.5f,-0.5f,
					 0.5f, 0.5f,
													VBO VBO VBO VBO VBO
					 0.5f, 0.5f,			<-- 第二个三角
					-0.5f, 0.5f,
					-0.5f,-0.5f
				};
			

	修改缓冲区大小		Gen...
				Bind...
				glBufferData(GL_ARRAY_BUFFER,6 * 2 * sizeof(float),positions,GL_STATIC_DRAW);

	修改Draw指令绘制顶点数	glDrawArrays(GL_TRIANGLES,0,6);		//无索引缓冲区，使用DrawArrays

2.
重复量随着工程量增高而增高，想要降低内存使用，提高性能，使用索引缓冲区（IBO）

	
	去除数组中重复的顶点	float positions[]{
					-0.5f,-0.5f,	//0		
					 0.5f,-0.5f,	//1
					 0.5f, 0.5f,	//2
					-0.5f, 0.5f,	//3
				};					//默认的索引排序

						
	保存索引数据(索引数组)	unsigned int indices[] = {
					0,1,2,				//使用索引确定渲染的顺序
					2,3,0
				};									IBO IBO IBO IBO IBO
	

	创建索引缓冲区		unsigned int ibo;
				glGenBuffer(1,&ibo);
				glBindBuffer(GL_ELENMNT_ARRAY_BUFFER,ibo);
				glBufferData(GL_ELEMENT_ARRAY_BUFFER,6 * sizeof(unsigned int),indices,GL_STATIC_DRAW);

	改变DrawCall指令		glDrawElements(GL_TRIANGLES,6,GL_UNSIGNED_INT,nullptr);		//索引的个数而非顶点的个数,因为已经在上面绑定了索引缓冲区对象 所以填入空指针



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>错误处理<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

检查OpenGL中的错误的方法
	glGetError()			兼容所有版本；但只返回错误码，需要重复使用；
	glDebugMessageCallback()	使用方便，直接返回错误详细信息；但只适用于OpenGL 4.3；
	外部工具，第三方库


												---------------------------------glGetError()---------------------------------------------
												函数：	glGetError()
												释义：  	用于获取当前的错误代码
												原型： 	GLenum glGetError(void);
												参数： 	无
												返回值： 最近一次 OpenGL 操作引发的错误代码
													如果在调用 glGetError 之前没有发生错误，那么它将返回 GL_NO_ERROR（等于0），表示没有错误
												使用方式： 
													连续多次调用来获取所有挂起的错误。通常在循环中使用 glGetError，直到返回 GL_NO_ERROR
												注意： 	实际开发中，为了更好地捕获和处理错误，使用错误回调函数（Error Callback）或第三方库来管理													错误状态。可以更方便地跟踪和解决错误，提高代码可维护性。
												------------------------------------------------------------------------------------------

GLGetError的使用

	1.创建函数（一个清除、避免其它函数的错误影响，一个输出相关错误信息）
												

		创建一个函数at the very top	static void GLClearError(){				//清除所有数据
							while(GLGetError() != GL_NO_ERROR);		//只要有错误返回就继续循环
						}
	
	
	
		创建另一个函数			static void GLCheckError(){
							while (GLenum error = glGetError()){		//只要glGetError()返回一个错误代码（获取到错误）则循环执行
													    glGetError()的返回值是GLenum枚举类型
		输出错误信息					std:::cout << "[OpenGL Error] (" << error << ")\n";
							}		
						}
	
	
	2.在错误的函数前后布置GLClear、GLCheck

	
		布置函数				GLClearError();		
						glDrawElements(GL_TRIANGLES,6,GL_INT,nullptr);		//假设知道错误位置
						GLCheckError();
	
						输出窗口会返回1280（gl用十六进制表示错误码） => 0×0500  => GL_INVALID_ENUM
	

					
但是实际上我们并不知道错误的代码在哪一行，所以我们可以让调试器在错误的代码行上中断（通过代码放置断点）	

	

	1.更改函数Check	
	
		bool				static bool GLLogCall(){				//布尔类型	
							while(enum error = glGetError()){
								std::cout << "[OpenGl Error] (" << error << ")\n";
								return true;
							}
							return false;	
						}
	
	2.编写断言（宏函数）	
						
						#define ASSERT(X) if((x)) __debugbreak();		//只要x是false，就会触发断点。
													    x需要用()括起来，因为宏的本质是文字替换。
													  MSVC函数_debugbreak()	"_"意味着函数是编译器本身的		
	
	3.用ASSERT包裹LogCall			ASSERT(GLLogCall());	



利用宏函数做升级版
		
	1.编写宏
						#define GLCall(x) GLCrearError();\
							x;\
							ASSERT(GLLogCall())				//这里不需要分号
		

	2.去掉前后函数，用GLCall包裹	
						GLCall(glDrawElements(GL_TRIANGLES,6,GL_INT,nullptr));		



但是还没有能够指定实际行，仅仅是在错误处中断而已，如果不使用调试器很难确定详细信息


	1.更新GLLogCall（）
	
		更新函数参数			static bool GLLogCall(const char* function,const char* file,int line){		//添加函数名、文件来源（源文件）、行数
							while(enum error = glGetError()){
								std::cout << "[OpenGl Error] (" << error << ")" << "in" << function << "\n" << file << ": " << line;
								return true;
							}
							return false;
						}

	2.更新宏函数	
						#define GLCall(x) GLCrearError();\
							x;\
		用宏指出实际信息				ASSERT(GLLogCall(#x,__FILE__,__LINE__))	// 	#x代表传入时将x转换为字符串
												  	__FILE__ 通性，代表实际文件路径
												  	__LINE__ 通性，代表当前代码行的行数
													两条下划线



												-----------------------------关于宏中的 do_while 和if -------------------------------------

												在宏函数中使用 do-while 结构的主要目的是为了确保宏函数在被调用时具有类似于函数的行为，以避免一些潜												在的问题。

												在宏函数中使用 if 语句可能会导致一些意外的行为，特别是当宏函数被包含在一个条件控制语句（如 if 或者 												while）中时。这是因为宏展开后的代码块通常是不带任何花括号的，而条件控制语句只能控制单个语句或语句													块，这可能导致预期之外的结果。


												#include <stdio.h>

												#define PRINT_TWICE(x) \
    												if (x > 0) \
        												printf("%d\n", x); \
        												printf("%d\n", x);

												int main() {
    												int a = 5;

    												if (a > 0)
        												PRINT_TWICE(a);

   												 return 0;
												}

												定义了一个宏函数 PRINT_TWICE(x)，该宏函数在 x 大于 0 时打印出两次 x 的值。然后在 main() 函数中通												过 if (a > 0) PRINT_TWICE(a) 调用宏函数。

												但由于宏展开后的代码块没有花括号，if (a > 0) 只能控制下一行代码 printf("%d\n", x);，而不是整个宏												函数。所以无论 a 是否大于 0，都只会执行 printf("%d\n", x); 这一行代码。

												为避免上述问题，使用 do-while(0) 结构来定义宏函数，其中的代码块会被视为单个语句，会正常地嵌套在条												件控制语句中。
												------------------------------------------------------------------------------------------


-----------------------若在宏函数中加入花括号，展开后的代码块有无花括号---------------------		------------------如何使宏函数展开后有花括号------------------------------------------------

在宏函数中加入花括号，并不会影响展开后的代码块是否包含花括号。						要使宏函数在展开后的代码中拥有花括号，可以使用一种称为"do-while"技巧的方法。这种技巧利用了C语言中的do-while循环结构，因为do-while循环至少会执行一次。
												
宏函数在预处理阶段被展开，展开后的代码是简单的文本替换。因此，无论在宏定义中是否使用了花括号		#define MY_MACRO(x) \
展开后的代码块都不会添加额外的花括号。   								do { \
        												/* 在这里编写你的代码 */ \
#include <stdio.h>        										printf("x 的值是：%d\n", (x)); \
#define MY_MACRO(x) { \
    printf("Hello, "); \  									} while(0)
    printf("%s\n", x); \
}												通过将宏定义放在do-while循环中，并且循环条件始终为0，确保了宏展开后代码块只会执行一次。这样调用													MY_MACRO时，会被展开成带有花括号的代码块，就像普通的代码块一样。
int main(){
    MY_MACRO("world");
    return 0;											int main() {
}   												int num = 10;
    												MY_MACRO(num);
    												return 0;
在上述示例中，我们定义了一个宏函数 MY_MACRO(x)，其中包含了花括号，并在其中打印了两条语句。		}

然而，当宏函数被展开后，展开后的代码并没有添加额外的花括号。实际上					展开后的代码如下所示：
MY_MACRO("world") 在展开后的代码中将变为：								
												int main() {
可以看到，展开后的代码块仍然没有花括号。这是因为宏展开只是简单的文本替换   				int num = 10;
不会感知原始代码中的语法结构，也不会自动添加或修改代码块的边界   					do {
        												/* 在这里编写你的代码 */
因此，在宏函数中加入花括号只是为了提供更好的代码可读性和可维护性，但并不影响宏函数展开后的
代码是否包含花括号。如果需要在展开后的代码中使用花括号，需要手动进行添加。					printf("x 的值是：%d\n", (num));
    												} while(0);
    												return 0;
												}

												通过使用do-while循环和宏定义，你可以确保宏函数在展开后的代码中拥有花括号。			

----------------------------------------------------------------------------------------	----------------------------------------------------------------------------------------

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>统一变量<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

												uniform <数据类型> <变量名>;

												<数据类型>表示Uniform变量的数据类型，如float、vec3、mat4等
												<变量名>表示Uniform变量的名称。

用来从CPU端获取数据										-------------------------------统一变量----------------------------------------

												概念：
												统一变量（Uniform Variable）是指在着色器程序中声明的全局变量，与顶点或片元等图元处理阶段相关联。

												用途：
												用于应用程序和着色器之间传递数据，包括标量（如整数、浮点数）、向量、矩阵以及纹理等。应用程序设													置统一变量的值，将其传递给正在执行的着色器程序影响渲染。

												注意： 
												1.统一变量在着色器程序中被视为只读变量，无法在内部进行修改。
												2.设置统一变量的值需要使用相应的API函数。使用glUniform3fv来设置一个三维向量类型的统一变量的值。
												-----------------------------------------------------------------------------------

上文中通过硬编码一个颜色，如果能从CPU（cpp程序端）传入数据，便可以实时更新、
												---------------------------顶点属性和统一变量的不同-----------------------------------------
												二者是获取CPU到GPU传递的对象数据的两种主要方式

    												属性（Attribute）： 属性是用于描述顶点数据的变量。
		      											通常与顶点缓冲对象（Vertex Buffer Object）中的数据相关联，用于指定每个顶点的位置、颜色、													法线等属性。属性的值在顶点处理阶段被插值，并在片元处理阶段用于计算最终的颜色或纹理坐标。
 												统一变量（Uniform Variable）： 统一变量用于在应用程序和着色器之间传递全局的数据。
													具有全局范围，在整个渲染过程中保持不变。
													通常用于传递一些常量、矩阵、纹理等数据给着色器，以影响渲染结果。
												不同：
 												属性在顶点着色器中声明，并使用"attribute"关键字进行标记。
 												应用程序中，可以通过顶点数组对象（Vertex Array Object）和顶点缓冲对象将顶点数据传递到属性变量中。

 												统一变量在着色器程序中声明，并使用"uniform"关键字进行标记。
 												应用程序中，可以通过OpenGL的API函数来设置统一变量的值，使得应用程序能够动态地控制着色器的行为。
												------------------------------------------------------------------------------------

											做总结：属性是设置每个顶点的，统一变量是设置每次绘制的

1.修改着色器（声明一个统一变量）

			#shader fragment
			#version 330 core
	
			layout(location = 0)  out vec4 color;
		
		添加--> 	uniform vec4 u_color;
	
			void main(){
				color = vec4(0.2,0.3,0.8,1.0);
			}

			
												--------------------------------glUniform()-------------------------------------
2.替换		
												函数： glUniform()
			void /...								释义:  设置统一变量（Uniform Variable）的值
		替换		color = u_color;	//设置实际的图形每一个像素颜色为u_color	原型： 根据不同的数据类型而有所差异。
			/...									参数： 

												float 类型：
3.在c++中（绑定着色器之后）设置统一变量								void glUniform1f(GLint location, GLfloat value);
												void glUniform2f(GLint location, GLfloat value1, GLfloat value2);
			GLCALL(glUseProgram(shader));		//此前必须有一个实际绑定的着色器	void glUniform3f(GLint location, GLfloat value1, GLfloat value2, GLfloat value3);
												void glUniform4f(GLint location, GLfloat value1, GLfloat value2, GLfloat value3, GLfloat 			GLCALL(int location = glGetUniformLocation(shader,"u_color"));												value4)																				
			ASSERT(location == -1);			//确保能找到location		向量类型(如 vec2、vec3、vec4)：
			GLCALL(glUniform4f(location,0.2f,0.3f,0.8f,1.0f));			glUniform2f(location, value1, value2)、
							//4f,因为参数是一个vec4			glUniform3f(location, value1, value2, value3)、
												glUniform4f(location, value1, value2, value3, value4) 来设置向量的值。

												整数类型：使用 glUniform1i(location, value)，其中 value 是一个整数值。

												矩阵类型(如 mat2、mat3、mat4)：
												其中 count 是矩阵的数量，transpose 表示是否对矩阵进行转置，value 是一个指向矩阵数据的指针
												glUniformMatrix2fv(location, count, transpose, value)、
												glUniformMatrix3fv(location, count, transpose, value)、
												glUniformMatrix4fv(location, count, transpose, value) 来设置矩阵的值。

												------------------------------------------------------------------------------------

												-----------------------------glGetUniformLocation()-------------------------------
												函数： glGetUniformLocation()
												释义： 获取着色器程序中指定统一变量的位置
												原型： GLint glGetUniformLocation(GLuint program, const GLchar* name);
												参数： program 是一个着色器程序对象的标识符（ID），表示要查询的统一变量所属的着色器程序。
												      name 是一个以 null 结尾的字符串，表示要查询的统一变量的名称。
												返回值： 它会返回指定统一变量的位置。如果返回值为 -1，则表示未找到指定名称的统一变量。
												---------------------------------------------------------------------------------------

无限制帧率时，改变正方形颜色变化。

			float r = 0.0f;			//在循环外
			float increment = 0.05f;		//increment(递增)
			while /...
			{
				GLCALL( /...
			
			GLCALL(glUniform(location,r,0.2f,0.8f,1.0f));		//重新设置统一变量 并修改红色通道为r
			GLCALL(glDrawElements /...
			
			if(r < 0.0)
				incremnt = 0.05f;
			else if(r > 1.0)
				increment = -0.05f;

			r += increment;

设置帧率
			
			glfwMakeContextCurrent(window);			//在有效的上下文之后

			glfwSwapInterval(1);				//启用垂直同步
											
												----------------------------glfwSwapInterval()-----------------------------------------
												函数： 	glSwapInterval()
												释义： 	用于设置垂直同步（Vertical Synchronization）或称为帧缓冲交换间隔。
													控制窗口显示的帧率，并与显示器的刷新率同步。
												原型：	void glfwSwapInterval(int interval);
												参数：     interval 表示帧缓冲交换间隔的设置。
													如果 interval 的值为 0，则禁用垂直同步；如果值为 1，则启用垂直同步。
												V-Sync： (垂直同步)用于解决图像撕裂（Screen Tearing）问题。
												             	图像撕裂是渲染图像时，显示器刷新率与应用程序的渲染不同步，导致图像上出现水平线断裂的情况。
												       	而垂直同步通过限制应用程序的帧率与显示器的刷新率相匹配，以避免图像撕裂。
												----------------------------------------------------------------------------------------
如果矩形是由两个三角形组成的，使用统一变量不能达成两个三角形不同颜色绘制，因为统一变量是在一个绘制指令中绘制的(glDrawElements)
换句话说，统一变量是设置每次绘制的。想实现必须使用顶点属性。

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>顶点数组<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1.概念：
    基本上是一种通过特定的规范绑定顶点缓冲区布局的方式

2.使用原因：
    顶点数组对象允许我们通过glVertexAttribPointer绑定顶点规范,为了避免每次绘制之前都要指明顶点布局

3.不使用顶点数组对象时：（绑定顶点缓冲区、指明顶点布局、绑定索引缓冲区、发送绘制指令）
	在实际的应用顶点缓冲区中
	3.1我们需要在 //统一变量 之后将所有东西解绑
	3.2然后在绘制之前（DrawElements之前）绑定所需要的东西



    		原代码		//顶点缓冲区(VBO
    				unsigned int buffer;                                //声明一个GLuint变量(即声明一个无类型的对象名称
    				GLCALL(glGenBuffers(1, &buffer));                   //生成一个缓冲对象
    				GLCALL(glBindBuffer(GL_ARRAY_BUFFER, buffer));      //将缓冲对象绑定到OpenGL上下文环境中以便相关函数使用
    				GLCALL(glBufferData(GL_ARRAY_BUFFER, 4 * 2 * sizeof(float), positions, GL_STATIC_DRAW));

    				//顶点属性
    				GLCALL(glEnableVertexAttribArray(0));
    				GLCALL(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0));      //pointer是常量指针，例如想填入8，需要写(const void*)8。结构体可以直接用宏

    				//索引缓冲区
    				unsigned int ibo;
    				GLCALL(glGenBuffers(1, &ibo));
    				GLCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo));
    				GLCALL(glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW));

    				//调用函数
    				ShaderSrc source = ParseShader("res/shaders/Basic.shader");                  //source是结构体类型；参数是相对路径(填入字符串 "____"
    				unsigned int shader = CreateShader(source.VertexSrc, source.FragmentSrc);    //调用函数( CreateShader() return program <- unsigned int)

    				//绑定着色器
    				GLCALL(glUseProgram(shader));                   
                                                    
    				//统一变量
    				GLCALL(int location = glGetUniformLocation(shader, "u_color"));              //捕获统一变量位置（需要在绑定着色器之后
    				ASSERT(location != -1);                                                      //判断断言的条件，确保location的有效性
    				GLCALL(glUniform4f(location, 0.2f, 0.3f, 0.8f, 1.0f));
	--->    进行解绑	
		1		GLCALL(glBindBuffer(GL_ARRAY_BUFFER,0));
		2		GLCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0));
		3		GLCALL(glUseProgram(0));
		

				while (!glfwWindowShouldClose(window))
    				{
        				/* Render here */
        				GLCALL(glClear(GL_COLOR_BUFFER_BIT));
	--->       进行绑定
		1			GLCALL(glUseProgram(shader));
					GLCALL(glUniform4f(location, r, 0.3f, 0.8f, 1.0f));

		2			GLCALL(glBindBuffer(GL_ARRAY_BUFFER,buffer));
		3			GLCALL(glEnableVertexAttribArray(0));
    		4			GLCALL(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0)); 
 
		5			GLCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ibo));
					
					
        				GLCALL(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr));
					/...


4.使用顶点数组对象时：（绑定顶点数组对象、绑定索引缓冲区、发送绘制指令）
    顶点数组对象将包含 顶点缓冲区的绑定 和 设置顶点属性布局
	技术上讲，顶点数组对象的使用是必须的
	4.1一般情况下，兼容性文件会默认创建一个顶点数组对象（兼容OpenGL配置文件使VAO对象零成为默认对象。仅创建对象，而glEnableVertexAttribArray(要启用的顶点属性数组的索引)会为其启动顶点数组）
	4.2但在核心配置文件中不会默认设置，需要显示地创建一个OpenGL顶点数组对象并绑定（核心配置不使其为对象）

												-----------------------------glfwWindowHint----------------------------------------
												函数： glfwWindowHint()
												释义： 用于设置窗口相关的参数。
												原型： void glfwWindowHint(int hint, int value);
												参数： 
												      hint 表示要设置的窗口参数类型。常见的参数类型有：

    													GLFW_RESIZABLE：窗口是否可调整大小.
														value：GLFW_TRUE（可调整大小）或 GLFW_FALSE（不可调整大小）。

    													GLFW_VISIBLE：窗口是否可见
														value： GLFW_TRUE（可见）或 GLFW_FALSE（不可见）。

    													GLFW_DECORATED：窗口是否有边框和标题栏
														value ：GLFW_TRUE（有边框和标题栏）或 GLFW_FALSE（无边框和标题栏）。

    													GLFW_CONTEXT_VERSION_MAJOR：指定所需的 OpenGL 上下文的主版本号。
														value：主版本号（数字）
    													GLFW_CONTEXT_VERSION_MINOR：指定所需的 OpenGL 上下文的次版本号。
														value：此版本号（数字）

													GLFW_OPENGL_PROFILE：指定所需的 OpenGL上下文的配置文件，
														value为以下之一：
    															GLFW_OPENGL_CORE_PROFILE：核心配置文件
    															GLFW_OPENGL_COMPAT_PROFILE：兼容性配置文件
    															GLFW_OPENGL_ANY_PROFILE：任意配置文件

													其他一些参数类型可以在官方文档查找
													
												-----------------------------------------------------------------------------------
为了演示：将在OpenGL中创建一个上下文 以使用核心配置文件创建窗口

				main(void)
				{
    				    GLFWwindow* window;

    				   /* Initialize the library */
    				   if (!glfwInit())
        				return -1;

		设置主版本----->	   glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);			//
		设置次版本----->	   glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);			//设置版本为3.3
		设置配置	 ----->	   glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);	//OpenGL配置是核心配置文件（如果未绑定顶点数组对象，会报错）

    				   /* Create a windowed mode window and its OpenGL context */
    				   window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
													---------------GLFW_CONTEXT_VERSION和GLFW_VERSION有啥区别--------------------------

    				   if (!window)								GLFW_CONTEXT_VERSION_MAJOR 和 GLFW_CONTEXT_VERSION_MINOR 用于设置所请求的OpenGL上下文
    				   {									版本号，而 GLFW_VERSION_MAJOR 和 GLFW_VERSION_MINOR 用于设置所请求的GLFW库版本号。这两
        				glfwTerminate();						对选项具有不同的作用和含义。
        				return -1;							----------------------------------------------------------------------------------
    				   }

    				   /* Make the window's context current */
    				   glfwMakeContextCurrent(window);

    				/...
    				/...


显示创建顶点数组对象（在顶点缓冲区之前创建），随后便可以使绑定缓冲区、指定顶点布局有效

				 

		创建VAO	----->   usigned int VAO;
			----->	 GLCALL(glGenVertexArrays(1,&VAO));
			----->	 GLCALL(glBindVertexArray(VAO));
				 
				 /...
				 /...

	 	进行解绑	----->											-------------------EnableVertexAttribArray--------------------------------
		1		GLCALL(glUseProgram(0));				//解绑着色器		glEnableVertexAttribArray和 glDisableVertexAttribArray
		4		GLCALL(glBindVertexArray(0));				//解绑顶点数组		用于启用和禁用顶点属性数组。
		2		GLCALL(glBindBuffer(GL_ARRAY_BUFFER,0));		//解绑顶点缓冲区	
		3		GLCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0));	//解绑索引缓冲区		函数：glEnableVertexAttribArray（） 
														释义：用于启用指定位置的顶点属性数组
														原型：void glEnableVertexAttribArray(GLuint index);
														参数：index
		进行绑定----->											      是要启用的顶点属性数组的位置索引。
		1		GLCALL(glUseProgram(shader));				//绑定着色器		-------------------------------------------------------------------------
				GLCALL(glUniform4f(location, r, 0.3f, 0.8f, 1.0f));

		//2		GLCALL(glBindBuffer(GL_ARRAY_BUFFER,buffer));							//..绑定顶点缓冲区
		2、3、4		GLCALL(glBindVertexArray(VAO));				//绑定顶点数组（包括了绑定缓冲区、启动顶点数组、指明布局）
		//3		//GLCALL(glEnableVertexAttribArray(0));								//..启用顶点数组
    		//4		//GLCALL(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0));		//..指明布局
 
		5		GLCALL(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,ibo));	//绑定索引缓冲区


使用方式：实际使用过程中，可以设置一个全局VAO 或 对每个几何体都设置一个VAO。
	 it depends
是否有必要使用：
	 OpenGL建议使用；也可以根据实际性能自行考虑

				